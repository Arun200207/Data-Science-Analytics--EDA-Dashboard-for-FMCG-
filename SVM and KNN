# supervised_fmcg_app.py

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Page setup
st.set_page_config(page_title="FMCG ML Classifier App", layout="wide", page_icon="ðŸ¤–")
st.title("ðŸ¤– FMCG Supervised Learning â€” KNN & SVM")

# Load FMCG dataset
@st.cache_data
def load_data():
    url = (
        "https://raw.githubusercontent.com/"
        "SooyeonWon/customer_analytics_fmcg/refs/heads/main/segmentation%20data.csv"
    )
    return pd.read_csv(url)

df = load_data()

st.subheader(" Dataset Preview")
st.dataframe(df.head())

# Sidebar controls
st.sidebar.header(" Model & Data Config")

# Feature selection
all_cols = df.columns.tolist()
target = st.sidebar.selectbox("Select target variable", all_cols, index=len(all_cols)-1)
features = st.sidebar.multiselect("Select feature columns", [c for c in all_cols if c != target], default=[c for c in all_cols if c != target])

if len(features) < 1:
    st.warning("Please select at least one feature.")
    st.stop()

# Algorithm choice & parameters
model_choice = st.sidebar.selectbox("Choose classifier", ["KNN", "SVM"])
if model_choice == "KNN":
    k = st.sidebar.slider("Neighbors (k)", 1, 20, 5)
elif model_choice == "SVM":
    C = st.sidebar.slider("Regularization (C)", 0.01, 10.0, 1.0)
    kernel = st.sidebar.selectbox("Kernel", ["linear", "rbf", "poly"])

# Train-test split
test_size = st.sidebar.slider("Test set (%)", 10, 50, 20)
X = df[features]
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size / 100, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_s = scaler.fit_transform(X_train)
X_test_s = scaler.transform(X_test)

# Train selected model
if model_choice == "KNN":
    model = KNeighborsClassifier(n_neighbors=k)
else:
    model = SVC(C=C, kernel=kernel)
model.fit(X_train_s, y_train)
y_pred = model.predict(X_test_s)

# Performance metrics
acc = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)

st.subheader(" Model Performance")
st.write(f"**Accuracy:** {acc:.2%}")

st.markdown("### Confusion Matrix")
fig, ax = plt.subplots()
sns.heatmap(cm, annot=True, cmap="Blues", fmt="d", ax=ax)
plt.xlabel("Predicted")
plt.ylabel("Actual")
st.pyplot(fig)

# Allow custom prediction
st.subheader(" Test Custom Prediction")

input_vals = {}
for feat in features:
    min_val = float(df[feat].min())
    max_val = float(df[feat].max())
    mean_val = float(df[feat].mean())
    input_vals[feat] = st.number_input(f"{feat}", min_val, max_val, mean_val)

if st.button("Predict"):
    inp_arr = scaler.transform(pd.DataFrame([input_vals]))
    pred = model.predict(inp_arr)[0]
    st.success(f"Predicted: **{pred}**")

st.sidebar.markdown("---")
st.sidebar.markdown("### Download Data & Predictions")
st.sidebar.download_button(
    "Download Dataset as CSV",
    data=df.to_csv(index=False),
    file_name="fmcg_segmentation_data.csv",
    mime="text/csv"
)
