# colorful_eda_dashboard.py# eda_segmentation_dashboard.py

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

st.set_page_config(page_title="FMCG Dataset EDA Dashboard", layout="wide", page_icon="📊")

st.title("🛒 FMCG Customer Segmentation Data – EDA Dashboard")
st.markdown("""
This dashboard loads data directly from the provided URL and offers interactive exploratory data analysis.
""")

@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/SooyeonWon/customer_analytics_fmcg/refs/heads/main/segmentation%20data.csv"
    df = pd.read_csv(url)
    return df

df = load_data()

st.subheader("Raw Data Snapshot")
st.dataframe(df.head())

st.markdown("###  Summary Statistics")
with st.expander("Show descriptive statistics"):
    st.write(df.describe(include='all'))

st.markdown("###  Column Types")
with st.expander("View column data types"):
    st.write(df.dtypes)

# Missing values
st.markdown("###  Missing Values")
missing = df.isnull().sum()
missing = missing[missing > 0]
if not missing.empty:
    fig, ax = plt.subplots()
    missing.plot(kind='bar', color='tomato', ax=ax)
    plt.ylabel("Missing Count")
    plt.title("Missing Values by Column")
    st.pyplot(fig)
else:
    st.info("No missing values detected.")

# Correlation Heatmap
st.markdown("###  Correlation Heatmap")
numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
if len(numeric_cols) >= 2:
    corr = df[numeric_cols].corr()
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
    st.pyplot(fig)
else:
    st.warning("Not enough numeric columns for a correlation heatmap.")

# Interactive Visualization Section
st.markdown("###  Interactive Visualizations")
plot_type = st.selectbox("Choose a plot type", ["Histogram", "Box Plot", "Scatter Plot"])

if plot_type == "Histogram" and numeric_cols:
    col = st.selectbox("Select numeric column", numeric_cols, key="hist")
    fig = px.histogram(df, x=col, nbins=30, title=f"Histogram of {col}", color_discrete_sequence=['#636EFA'])
    st.plotly_chart(fig, use_container_width=True)

elif plot_type == "Box Plot" and numeric_cols:
    col = st.selectbox("Select numeric column", numeric_cols, key="box")
    fig = px.box(df, y=col, title=f"Box Plot of {col}", color_discrete_sequence=['#EF553B'])
    st.plotly_chart(fig, use_container_width=True)

elif plot_type == "Scatter Plot" and numeric_cols:
    x_col = st.selectbox("Select X-axis", numeric_cols, key="scatter_x")
    y_col = st.selectbox("Select Y-axis", numeric_cols, key="scatter_y")
    color_col = st.selectbox("Optional Color Grouping", [None] + df.columns.tolist(), key="scatter_color")
    fig = px.scatter(df, x=x_col, y=y_col, color=color_col,
                     title=f"{y_col} vs {x_col}", template="plotly")
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("Please select valid numeric columns for plotting.")

# Categorical Distribution
st.markdown("###  Categorical Column Value Counts")
cat_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
if cat_cols:
    sel_cat = st.selectbox("Pick a categorical column", cat_cols)
    counts = df[sel_cat].value_counts().reset_index()
    counts.columns = [sel_cat, 'Count']
    fig = px.bar(counts, x=sel_cat, y='Count', color=sel_cat,
                 title=f"Distribution of {sel_cat}", template="plotly")
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("No categorical columns available.")

# Download processed data
st.sidebar.markdown("###  Download Data")
st.sidebar.download_button(
    label="Download Processed CSV",
    data=df.to_csv(index=False),
    file_name="fmcg_segmentation_data.csv",
    mime="text/csv"
)

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# Set up layout
st.set_page_config(page_title="Colorful EDA Dashboard", layout="wide", page_icon="📊")

st.title("📊 Customer Segmentation – Colorful EDA Dashboard")
st.markdown("Fully interactive, responsive, and colorful EDA dashboard built with Plotly + Streamlit 🎨")

# Load Data
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/SooyeonWon/customer_analytics_fmcg/refs/heads/main/segmentation%20data.csv"
    return pd.read_csv(url)

df = load_data()

# Identify column types
cat_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
num_cols = df.select_dtypes(include='number').columns.tolist()

# Sidebar Filters
st.sidebar.header("🎛️ Filters")
selected_cat = st.sidebar.selectbox("Categorical Column", cat_cols if cat_cols else [None])
selected_num = st.sidebar.selectbox("Numeric Column", num_cols if num_cols else [None])
group_col = st.sidebar.selectbox("Group By Column", cat_cols if cat_cols else [None], key='group')

# KPIs
if selected_num:
    st.markdown("## 📌 Key Metrics")
    col1, col2, col3 = st.columns(3)
    col1.metric("Total", f"{df[selected_num].sum():,.2f}")
    col2.metric("Average", f"{df[selected_num].mean():,.2f}")
    col3.metric("Max", f"{df[selected_num].max():,.2f}")

# Bar Chart
st.markdown("### 📊 Bar Chart")
if selected_cat and selected_num:
    bar_df = df.groupby(selected_cat)[selected_num].sum().reset_index().sort_values(selected_num, ascending=False)
    fig_bar = px.bar(bar_df, x=selected_cat, y=selected_num, color=selected_cat,
                     title=f"{selected_num} by {selected_cat}",
                     color_discrete_sequence=px.colors.qualitative.Vivid)
    st.plotly_chart(fig_bar, use_container_width=True)

# Pie Chart
st.markdown("### 🥧 Pie Chart")
if selected_cat and selected_num:
    pie_df = df.groupby(selected_cat)[selected_num].sum().reset_index()
    fig_pie = px.pie(pie_df, values=selected_num, names=selected_cat,
                     title=f"{selected_num} Share by {selected_cat}",
                     color_discrete_sequence=px.colors.qualitative.Pastel)
    st.plotly_chart(fig_pie, use_container_width=True)

# Histogram
st.markdown("### 📈 Histogram")
if selected_num:
    fig_hist = px.histogram(df, x=selected_num, nbins=30,
                            title=f"Distribution of {selected_num}",
                            color_discrete_sequence=["#F58518"])
    st.plotly_chart(fig_hist, use_container_width=True)

# Line Chart
st.markdown("### 📉 Line Chart")
if selected_num:
    fig_line = px.line(df[selected_num], title=f"{selected_num} Over Index",
                       labels={"index": "Index", selected_num: selected_num},
                       color_discrete_sequence=["#00BFC4"])
    st.plotly_chart(fig_line, use_container_width=True)

# Comparison Bar Chart
st.markdown("### 🔁 Comparison Bar Chart")
if group_col and selected_num:
    compare_df = df.groupby(group_col)[selected_num].mean().reset_index().sort_values(selected_num, ascending=False)
    fig_compare = px.bar(compare_df, x=group_col, y=selected_num, color=group_col,
                         title=f"Average {selected_num} by {group_col}",
                         color_discrete_sequence=px.colors.qualitative.Set3)
    st.plotly_chart(fig_compare, use_container_width=True)

# Scatter Matrix
st.markdown("### 🧮 Scatter Matrix")
if len(num_cols) >= 2:
    scatter_cols = st.multiselect("Choose Numeric Columns", num_cols, default=num_cols[:3])
    if len(scatter_cols) >= 2:
        fig_matrix = px.scatter_matrix(df, dimensions=scatter_cols, color=selected_cat if selected_cat else None,
                                       title="Scatter Matrix", height=600,
                                       color_discrete_sequence=px.colors.qualitative.Safe)
        st.plotly_chart(fig_matrix, use_container_width=True)

# Data Table
st.markdown("### 📋 Full Dataset")
st.dataframe(df, use_container_width=True, height=350)

# Download Button
st.sidebar.markdown("### 📥 Download CSV")
st.sidebar.download_button(
    "Download Data",
    data=df.to_csv(index=False),
    file_name="segmentation_data.csv",
    mime="text/csv"
)
