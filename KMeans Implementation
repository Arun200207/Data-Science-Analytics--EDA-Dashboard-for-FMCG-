# customer_segmentation_app.py

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

st.set_page_config(page_title="Customer Segmentation App", layout="centered")

st.title("ðŸ“Š Customer Segmentation using KMeans Clustering")
st.write("This app allows you to explore and segment customers based on behavioral features.")

# Load dataset from your provided URL
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/SooyeonWon/customer_analytics_fmcg/refs/heads/main/segmentation%20data.csv"
    df = pd.read_csv(url)
    return df

df = load_data()

# Display dataset preview
st.subheader("Raw Dataset")
st.dataframe(df.head())

# Let user choose clustering features
st.subheader("Select Features for Clustering")
numeric_columns = df.select_dtypes(include=np.number).columns.tolist()

if not numeric_columns:
    st.error("No numeric columns found in dataset for clustering.")
    st.stop()

selected_features = st.multiselect("Choose at least two numeric features:",
                                   options=numeric_columns,
                                   default=numeric_columns[:2])

if len(selected_features) < 2:
    st.warning("Please select at least two features to cluster meaningfully.")
    st.stop()

# Scale selected features
X = df[selected_features]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# KMeans Clustering
st.subheader("KMeans Clustering")
k = st.slider("Select number of clusters (K):", min_value=2, max_value=10, value=4)
kmeans = KMeans(n_clusters=k, random_state=42, n_init='auto')
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Visualize Clusters
st.subheader("Cluster Visualization")
if len(selected_features) >= 2:
    fig, ax = plt.subplots()
    sns.scatterplot(
        data=df,
        x=selected_features[0],
        y=selected_features[1],
        hue='Cluster',
        palette='Set2',
        s=100,
        ax=ax
    )
    plt.title(f"Customer Segments (K={k})")
    st.pyplot(fig)
else:
    st.info("Select at least two features to visualize clusters.")

# Show cluster averages
st.subheader("Cluster Summary (Averages)")
cluster_summary = df.groupby('Cluster')[selected_features].mean().round(2)
st.dataframe(cluster_summary)

# Download segmented dataset
csv = df.to_csv(index=False)
st.download_button("Download Segmented Data as CSV", data=csv, file_name='segmented_customers.csv', mime='text/csv')

st.success("âœ… Clustering Complete! Adjust the features and K to explore segments.")
